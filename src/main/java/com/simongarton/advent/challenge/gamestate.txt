    public static final class GameState {

        // I need to hold the state of the game - which will include the two players, their positions, scores,
        // and then whose turn it is and which roll it is of 3.
        // each state will then have three child states - moving onto the next roll, or turn, and checking to see if someone has won.

        private static long counter = 0;
        private static long kablooies = 0;
        private static long oneWins = 0;
        private static long twoWins = 0;

        private final long id;
        private final Player one;
        private final Player two;
        private boolean oneToPlay;
        private int roll;  // this is the next roll to make
        private boolean complete;
        private int winner;

        private GameState child1;
        private GameState child2;
        private GameState child3;

        public GameState(final Player one, final Player two) {
            this.id = counter++;
            this.oneToPlay = true;
            this.roll = 1;
            this.complete = false;
            this.winner = 0;
            this.one = one;
            this.two = two;
        }

        public void kablooie() {
            if (kablooies % 1000000 == 0) {
                System.out.println("kablooie for " + this.id + " on " + kablooies + " one wins " + oneWins + " two wins " + twoWins);
            }
            kablooies++;
//            System.out.println(" " + this.one);
//            System.out.println(" " + this.two);
            // if I have won already, then stop
            if (this.complete) {
//                System.out.println("kablooie for " + this.id + " on " + kablooies++ + " one wins " + oneWins + " two wins " + twoWins);
                return;
            }
            this.child1 = new GameState(this.one.makeCopy(), this.two.makeCopy());
            this.child2 = new GameState(this.one.makeCopy(), this.two.makeCopy());
            this.child3 = new GameState(this.one.makeCopy(), this.two.makeCopy());
            this.child1.progressGame(this, 1);
            this.child2.progressGame(this, 2);
            this.child3.progressGame(this, 3);
            this.child1.kablooie();
            this.child2.kablooie();
            this.child3.kablooie();
        }

        private void progressGame(final GameState parent, final int diceRoll) {
            this.oneToPlay = parent.oneToPlay;
            this.roll = parent.roll + 1;
            if (this.roll == 4) {
                this.oneToPlay = !this.oneToPlay;
            }
            if (this.oneToPlay) {
                this.one.moveTo(diceRoll);
                if (this.roll == 4) {
                    this.one.score += this.one.position;
                    this.one.moves += 1;
                    if (this.one.score >= 21) {
//                        System.out.println("one won with a score of " + this.one.score + " on move " + this.one.moves);
                        this.complete = true;
                        this.winner = 1;
                        oneWins++;
                    }
                }
            } else {
                this.two.moveTo(diceRoll);
                if (this.roll == 4) {
                    this.two.score += this.two.position;
                    this.two.moves += 1;
                    if (this.two.score >= 21) {
//                        System.out.println("two won with a score of " + this.two.score + " on move " + this.two.moves);
                        this.complete = true;
                        this.winner = 2;
                        twoWins++;
                    }
                }
            }
            if (this.roll == 4) {
                this.roll = 1;
            }
        }
    }